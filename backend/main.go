package main

import (
	"backend/handlers"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/joho/godotenv"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found")
	}

	// –ü–æ—Ä—Ç—ã
	httpsPort := os.Getenv("HTTPS_PORT")
	if httpsPort == "" {
		httpsPort = "443"
	}

	httpPort := os.Getenv("HTTP_PORT")
	if httpPort == "" {
		httpPort = "80"
	}

	// –ü—É—Ç–∏ –∫ SSL —Ñ–∞–π–ª–∞–º
	certFile := os.Getenv("SSL_CERT_FILE")
	keyFile := os.Getenv("SSL_KEY_FILE")

	// –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
	if certFile == "" {
		certFile = "certificate.crt"
	}
	if keyFile == "" {
		keyFile = "certificate.key"
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
	if _, err := os.Stat(certFile); os.IsNotExist(err) {
		log.Printf("‚ùå SSL certificate file not found: %s", certFile)
		log.Printf("‚ö†Ô∏è  Starting in HTTP-only mode")
		startHTTPOnly(httpPort)
		return
	}
	if _, err := os.Stat(keyFile); os.IsNotExist(err) {
		log.Printf("‚ùå SSL key file not found: %s", keyFile)
		log.Printf("‚ö†Ô∏è  Starting in HTTP-only mode")
		startHTTPOnly(httpPort)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π mux –¥–ª—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞
	mainMux := http.NewServeMux()
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ mux
	mainMux.Handle("/js/", http.StripPrefix("/js/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/javascript")
		http.FileServer(http.Dir("./../html/js")).ServeHTTP(w, r)
	})))

	mainMux.Handle("/css/", http.StripPrefix("/css/", http.FileServer(http.Dir("./../html/css"))))
	mainMux.Handle("/images/", http.StripPrefix("/images/", http.FileServer(http.Dir("./../html/images"))))
	mainMux.Handle("/", protectAdminFiles(http.FileServer(http.Dir("./../html"))))

	// API endpoints —Å CORS
	mainMux.HandleFunc("/api/send-form", enableCORS(handlers.SendToTelegramHandler))
	mainMux.HandleFunc("/api/projects", enableCORS(handlers.GetProjectsHandler))

	// –ê–¥–º–∏–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π
	mainMux.HandleFunc("/admin", handlers.RequireAuth(handlers.AdminHandler))
	mainMux.HandleFunc("/admin/login", handlers.AdminLoginHandler)
	mainMux.HandleFunc("/admin/api/projects", handlers.ProtectAPI(handlers.AdminAPIHandler))

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ HTTPS (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ)
	go func() {
		log.Printf("üîÑ HTTP redirect server listening on :%s", httpPort)
		// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
		redirectHandler := http.HandlerFunc(redirectToHTTPS)
		if err := http.ListenAndServe(":"+httpPort, redirectHandler); err != nil {
			log.Printf("‚ùå HTTP server error: %v", err)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π) —Å mainMux
	log.Printf("üöÄ HTTPS server starting on :%s", httpsPort)
	log.Printf("üì± Main site: https://localhost:%s", httpsPort)
	log.Printf("üîê Admin panel: https://localhost:%s/admin", httpsPort)
	log.Printf("üîí Using SSL certificate: %s", certFile)
	log.Printf("üîë Using SSL key: %s", keyFile)
	
	if err := http.ListenAndServeTLS(":"+httpsPort, certFile, keyFile, mainMux); err != nil {
		log.Fatalf("‚ùå HTTPS server error: %v", err)
	}
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å HTTP –Ω–∞ HTTPS
func redirectToHTTPS(w http.ResponseWriter, r *http.Request) {
	httpsPort := os.Getenv("HTTPS_PORT")
	if httpsPort == "" {
		httpsPort = "443"
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
	host := r.Host
	if strings.Contains(host, ":") {
		host = strings.Split(host, ":")[0]
	}
	
	// –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤–æ–π URL
	target := "https://" + host
	
	target += r.URL.RequestURI()
	
	http.Redirect(w, r, target, http.StatusPermanentRedirect)
}

// CORS middleware –¥–ª—è API
func enableCORS(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}
		
		next(w, r)
	}
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ HTTP (–µ—Å–ª–∏ SSL —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
func startHTTPOnly(port string) {
	// –°–æ–∑–¥–∞–µ–º mux –¥–ª—è HTTP-only —Ä–µ–∂–∏–º–∞
	mux := http.NewServeMux()
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
	mux.Handle("/js/", http.StripPrefix("/js/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/javascript")
		http.FileServer(http.Dir("./../html/js")).ServeHTTP(w, r)
	})))

	mux.Handle("/css/", http.StripPrefix("/css/", http.FileServer(http.Dir("./../html/css"))))
	mux.Handle("/images/", http.StripPrefix("/images/", http.FileServer(http.Dir("./../html/images"))))
	mux.Handle("/", protectAdminFiles(http.FileServer(http.Dir("./../html"))))

	// API endpoints —Å CORS
	mux.HandleFunc("/api/send-form", enableCORS(handlers.SendToTelegramHandler))
	mux.HandleFunc("/api/projects", enableCORS(handlers.GetProjectsHandler))

	// –ê–¥–º–∏–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π
	mux.HandleFunc("/admin", handlers.RequireAuth(handlers.AdminHandler))
	mux.HandleFunc("/admin/login", handlers.AdminLoginHandler)
	mux.HandleFunc("/admin/api/projects", handlers.ProtectAPI(handlers.AdminAPIHandler))

	log.Printf("üöÄ HTTP server starting on :%s", port)
	log.Printf("üì± Main site: http://localhost:%s", port)
	log.Printf("üîê Admin panel: http://localhost:%s/admin", port)
	log.Printf("‚ö†Ô∏è  HTTPS: DISABLED - running in HTTP mode only")
	
	if err := http.ListenAndServe(":"+port, mux); err != nil {
		log.Fatalf("‚ùå HTTP server error: %v", err)
	}
}

// Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–∫–∏
func protectAdminFiles(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –ó–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ HTML —Ñ–∞–π–ª–∞–º –∞–¥–º–∏–Ω–∫–∏
		if strings.HasPrefix(r.URL.Path, "/admin") && filepath.Ext(r.URL.Path) == ".html" {
			http.Error(w, "Access denied", http.StatusForbidden)
			return
		}
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ MIME-—Ç–∏–ø—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
		ext := filepath.Ext(r.URL.Path)
		switch ext {
		case ".js":
			w.Header().Set("Content-Type", "application/javascript")
		case ".css":
			w.Header().Set("Content-Type", "text/css")
		case ".png":
			w.Header().Set("Content-Type", "image/png")
		case ".jpg", ".jpeg":
			w.Header().Set("Content-Type", "image/jpeg")
		case ".svg":
			w.Header().Set("Content-Type", "image/svg+xml")
		}
		
		next.ServeHTTP(w, r)
	})
}